name: build

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        steamworks: [steam, non-steam]
        include:
          - os: ubuntu-latest
            cc: gcc
            cxx: g++
          - os: windows-latest
            cc: cl
            cxx: cl
    env:
      CC: ${{ matrix.cc }}
      CXX: ${{ matrix.cxx }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Setup STEAMWORKS-related environment variables
      shell: bash
      run: |
        if [ ${{ matrix.steamworks }} == 'steam' ]
        then
        echo "STEAMWORKS_ENABLED=ON" >> "$GITHUB_ENV"; echo "steamworks_suffix=-steam" >> "$GITHUB_ENV"
        else
        echo "STEAMWORKS_ENABLED=OFF" >> "$GITHUB_ENV"; echo "steamworks_suffix=" >> "$GITHUB_ENV"
        fi

    - name: Checkout steam-runtime
      if: startsWith(matrix.os, 'ubuntu')
      uses: actions/checkout@v3
      with:
        repository: ValveSoftware/steam-runtime
        path: steam-runtime
    - name: Cache steam-runtime
      if: startsWith(matrix.os, 'ubuntu')
      id: cache-steam-runtime
      uses: actions/cache@v3
      with:
        path: com.valvesoftware.SteamRuntime.Sdk-i386-scout-sysroot.tar.gz
        key: ${{ runner.os }}-steam-runtime
    - name: Download steam-runtime
      if: startsWith(matrix.os, 'ubuntu') && steps.cache-steam-runtime.outputs.cache-hit != 'true'
      run: wget --no-verbose https://repo.steampowered.com/steamrt-images-scout/snapshots/latest-steam-client-general-availability/com.valvesoftware.SteamRuntime.Sdk-i386-scout-sysroot.tar.gz
    - name: Install steam runtime
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo apt update
        ./steam-runtime/setup_chroot.sh --i386 --tarball ./com.valvesoftware.SteamRuntime.Sdk-i386-scout-sysroot.tar.gz
        sudo sed -i 's/groups=sudo/groups=adm/g' /etc/schroot/chroot.d/steamrt_scout_i386.conf

    - name: Build on Linux
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.cc, 'gcc')
      run: |
        schroot --chroot steamrt_scout_i386 -- cmake -B build -S . -DCMAKE_EXE_LINKER_FLAGS="-Wl,--no-undefined" -DCMAKE_INSTALL_PREFIX="$PWD/dist" -DSERVER_LIBRARY_NAME=delta -DSTEAMWORKS_ENABLED=${{ env.STEAMWORKS_ENABLED }}
        cp utils/vgui/lib/vgui.so build/cl_dll
        schroot --chroot steamrt_scout_i386 -- cmake --build build --target all
        schroot --chroot steamrt_scout_i386 -- cmake --build build --target install

    - name: Add msbuild to PATH
      if: startsWith(matrix.os, 'windows')
      uses: microsoft/setup-msbuild@v1.1
    - name: Build on Windows
      if: startsWith(matrix.os, 'windows')
      run: |
        cmake -A Win32 -B build -DCMAKE_INSTALL_PREFIX="dist" -DSTEAMWORKS_ENABLED=${{ env.STEAMWORKS_ENABLED }}
        msbuild -verbosity:normal /property:Configuration=Release build/INSTALL.vcxproj

    - name: Extract branch name
      shell: bash
      run: echo "branch=$(echo ${GITHUB_REF#refs/heads/} | tr '/' '_')" >> $GITHUB_OUTPUT
      id: extract_branch
    - name: Extract gamedir
      shell: bash
      run: echo "gamedir=$(grep build/CMakeCache.txt -Ee 'GAMEDIR:STRING=[a-z]+' | cut -d '=' -f 2)" >> $GITHUB_OUTPUT
      id: extract_gamedir
    - name: Delete .lib files from dist
      if: startsWith(matrix.os, 'windows')
      run: |
        Remove-Item -Force -Path dist/${{ steps.extract_gamedir.outputs.gamedir }}/cl_dlls/client.lib
        Remove-Item -Force -Path dist/${{ steps.extract_gamedir.outputs.gamedir }}/dlls/delta_particles.lib
    - name: Upload linux artifact
      if: startsWith(matrix.os, 'ubuntu') && matrix.cc == 'gcc'
      uses: actions/upload-artifact@v4
      with:
        name: delta-particles-sdk-${{ steps.extract_branch.outputs.branch }}-linux${{ env.steamworks_suffix }}
        path: dist/${{ steps.extract_gamedir.outputs.gamedir }}
    - name: Upload windows artifact
      if: startsWith(matrix.os, 'windows')
      uses: actions/upload-artifact@v4
      with:
        name: delta-particles-sdk-${{ steps.extract_branch.outputs.branch }}-windows${{ env.steamworks_suffix }}
        path: dist/${{ steps.extract_gamedir.outputs.gamedir }}

